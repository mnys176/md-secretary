package main

import (
	"fmt"
	"os"
	// "flag"
)

const usage string = `Usage:
    md-secretary <command> [<options>] <args>

Commands:
    contents
        Displays a rundown of every project in a notebook. This rundown
        includes its title, timeline, and abstract.

    create <project-name>
        Creates a new project folder structure in the notebook taking
        a project name for an argument. The resulting project will
        be a folder with the same name (sanitized to be "filesystem-
        friendly"). Within the project, a media folder, project
        file, and its first month folder will also be created. If a
        project with the same name already exists, creation will fail.

    append <project-name>
        Extends an existing project by adding a month folder structure
        to it. The created month folder will contain a log file and
        summary file. If a project with the given name doesn't exist,
        the command will fail.

    scrap <project-name>
        Deletes an existing project after confirming with the user.
        The confirmation can be disabled using the ` + "`--force`" + ` flag. If
        a project with the given name doesn't exist, the command will
        fail.

    import <path-to-json>
        Builds a project from a JSON file generated by the ` + "`export`" + `
        command and adds it to a notebook. If the given JSON file does
        not exist, the command will fail. If a project with the name
        derived from the JSON file already exists, the command will
        indicate the conflict to the user and confirm with them that
        they want to overwrite the existing version. The ` + "`--force`" + `
        flag will disable this confirmation.

    export <project-name>
        Generates a JSON file that describes the current state of a
        project with the given name. This can be useful for sharing
        long projects between notebooks. All media will be encoded as
        Base64. If the ` + "`--transfer`" + ` flag is provided, the project will
        also be removed from the current notebook, as it is implied that
        the project will not be returning. If no project with the given
        name exists, the command will fail.

Options:
    --path, -p <path-to-notebook>
        Specifies the path to a notebook. By default, the current
        working directory is used. Default is the current working directory.

    --force, -f
        When using the ` + "`scrap`" + ` or ` + "`import`" + ` command, this will disable
        any confirmation and perform the operation automatically. Use
        this flag with caution. Otherwise, this has no effect.

    --output, -o <path-to-output-location>
        When using the ` + "`export`" + ` command, this specfies the output path
        to the generated JSON file. Otherwise, this has no effect.
        Default is the current working directory.`

func main() {
	if len(os.Args[1:]) == 0 {
		fmt.Println(usage)
		os.Exit(0)
	}

	cmd := os.Args[1]

	switch cmd {
	case "contents":
		fmt.Println("contents")
	case "create":
		fmt.Println("create")
	case "append":
		fmt.Println("append")
	case "scrap":
		fmt.Println("scrap")
	case "import":
		fmt.Println("import")
	case "export":
		fmt.Println("export")
	default:
		fmt.Println(usage)
	}
}